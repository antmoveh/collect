
class Document:
    # 特殊字符
    """
    \	转义字符
    .	匹配任何角色
    ^	匹配字符串的开头
    $	匹配字符串的结尾
    [5b-d]	匹配任何字符'5'，'b'，'c'或'd'
    [^a-c6]	匹配除“a”，“b”，“c”或“6”之外的任何字符
    R|S	匹配正则表达式R或正则表达式S
    ()	创建捕获组并指示优先级
    """
    # 量词
    """
    *	0或更多（附加?非贪婪）
    +	1个或更多（附加?非贪婪）
    ?	0或1（?非贪婪附加）
    {m}	恰好mm次出现
    {m, n}	从m到n。m默认为0，n为无穷大
    {m, n}?	从m到n，尽可能少
    """
    # 特殊序列
    """
    \A	字符串的开头
    \b	匹配单词边界处的空字符串（在\w和之间\W）
    \B	匹配空字符串不在单词边界
    \d	数字
    \D	非数字
    \s	空格： [ \t\n\r\f\v]
    \S	非空白
    \w	字母数字： [0-9a-zA-Z_]
    \W	非字母数字
    \Z	字符串的结尾
    \g<id>	匹配先前定义的组
    """
    # 特殊序列
    """
    ...代表任意正则表达式
    (...)初始版本(?...)扩展符号(?:...)常规扩展版本，实际效果一样
    (?<name>...)给分组设置名称，默认名称为1,2...
    (?=name)对刚刚设置分组名字的引用，\g<name> \g<id> \1同样效果
    (?iLmsux)	匹配空字符串，设置re.X标志
    (?#...)	评论内容，匹配时候忽略
    (?=...)	先行断言，只有后匹配成功时候，在进行前部分匹配Isaac (?=Asimov)'Isaac ''Asimov'
    (?!...)	只有后不匹配时候，才进行前部分匹配 Isaac (?!Asimov)'Isaac ''Asimov'
    (?<=...) 前边匹配，则进行后边匹配 ?<=abc)def将找到匹配'abcdef
    (?<!...) 前边不匹配，则进行后边匹配
    (?(id)yes|no) 前边匹配成功则执行yes,失败则执行no (<)?(\w+@\w+(?:\.\w+)+)(?(1)>|$)匹配'<user@host.com>'以及'user@host.com'
    """